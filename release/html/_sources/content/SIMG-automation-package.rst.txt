.. _SIMG-automation-package:

Response Surface Modeling 
==============================


Introduction
-------------
The response surface modeling (RSM) technique provides a tool that gives us the ability to model 
the behavior of our signaling system as the circuit and interconnect characteristics vary. 
RSM works by fitting a statistical model of the output response as a function of changes in the input variables. [#ASIHSDD]_

The general form of the response surface model is 
y is the system response. β is the model fit coefficients. x is the system input.

It is highly flexible, allowing to fit curved response surface by using higher-order combinations of input variables.
In general ,second-order models are sufficient for high-speed signaling links.




1. Check out source code from SVN, you need a SVN client like TortoiseSVN.

   http://svn04/repos/pylab2/trunk

2. Double click **install_lib_pth.py** to add the source code folder to
   python library path

After that you can test the installation by double click **Main.py**, the 
GUI is as the picture below:

.. image:: ../_static/SIMG-automation-package/main-gui-clean.png



User Guide
----------

Architecture Overview
^^^^^^^^^^^^^^^^^^^^^

.. image:: ../_static/SIMG-automation-package/PyLab-arch.png

The project name is **pylab2**, version number 2 means a major change 
compare to pylab which is already deprecated.

The Main.py is the main GUI to load automation script.

The pyinstrument folder is for equipment driver, the driver is a wrapper 
of SCPI command.

The utility folder is for small GUI control tools, usually it was used 
for manual remote control equipment

The meas folder is like a plugin(or subvi in Labview), each meas program 
will response for a special purpose test, like min-swing test, 
Max BER range test. The meas could be call by Main.py with a csv macro, 
the meas also could run independently.

The sw_tool folder is for some tools which not need a hardware equipment 
connection. Such as DTG pattern generator, Agilent CTS report reader.



The Main.py and meas plug tie by defined interface. As the picture below,
Main.py will read test macro file, and set PVT condition. Meas only do the 
measurement driven by Main.py.

.. image:: ../_static/SIMG-automation-package/main-and-meas.png

Main
^^^^
Main.py is the root folder, which as primary GUI interface. The automation
test need be launched here, please ref to section 
:ref:`Run-a-Automation-test-by-Main` for detail.

The menus including:

1. File(not implemented), 
2. Instrument - to configure PVT condition control equipment
3. Utility - shortcut to utilities, which could also be launched in the utility folder.
4. Option - not implemented
5. Help - not implemented


The main GUI body including:

1. The test macro file is the CSV file which is a table like macro
2. The Buttons for test process control will for start, stop test or save test result etc.
3. The log output will give some usefully informations when test is running.



.. image:: ../_static/SIMG-automation-package/main-gui-note.png






.. _Configure-Instrument:

Configure Instrument
^^^^^^^^^^^^^^^^^^^^

1. Configure I2C device by Menu *Instrument->Iport*

   This setting is for **i2c-init** command, the Iport com is 
   the serial port and I2C File is absolutely file path of
   I2C macro 

   .. image:: ../_static/SIMG-automation-package/conf-iport.png

2. Configure temperature controller by Menu *Instrument->TempCtrl*

   This setting is for **set-temp** command. Select the temperature
   controller port.

   .. image:: ../_static/SIMG-automation-package/conf-temp.png


3. Configure power supply by Menu *Instrument->PowerSupply*

   This setting is for **set-volt** command. Edit the power label
   mapping to GPIB address. 

   .. image:: ../_static/SIMG-automation-package/conf-ps.png


4. Configure clock generator by Menu *Instrument->ClockGenerator*

   This setting is for **set-clock** command. Select the clock
   generator GPIB address and model number. 

   .. image:: ../_static/SIMG-automation-package/conf-clock.png 




Meas
^^^^
The meas is a collection of special measurement program with
the following features.

1. Measurement which could be called by Main.
2. Every meas have a folder
3. Folder structure is same as standard python library
4. Could inherit from MeasFramebase, which is located in mainlib

The Pylab2 give the freedom of meas to implement the individual measurement procedure,
while Main.py only response for PVT test condition control. The document 
of each meas also need to be write with the implementation(TBD).

The available meas plug-in are:


.. csv-table:: Meas List
    :widths: 10 20
    :header-rows: 1
    :file: Meas-List.csv









.. _Main-Macro-command:

Main Macro command
^^^^^^^^^^^^^^^^^^
The following command was support. The command following such rule:

1. Case insensitive 
2. Space at the start or end will be stripped

.. csv-table:: Macro Command List
    :widths: 10 20 10
    :header-rows: 1
    :file: Macro-Command-List.csv





.. _Run-a-Automation-test-by-Main:

Run a Automation test by Main
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. Double click Main.py to launch the GUI
2. Open the test macro by press **Open button** on the up-left corner.
   Please refer to section :ref:`Main-Macro-command` 
   for the macro syntax detail 

    .. image:: ../_static/SIMG-automation-package/open-button.png

3. A meas plug window will pop up if it could find the meas 
   defined in the csv macro correctly. The meas plugin in was in meas 
   folder, each folder is a special measurement program.

4. Configure the voltage, temperature and frequency condition
   in **Instrument** menu if necessary. Please refer to section
   :ref:`Configure-Instrument`.

5. Press "Run" button to start the test. The default start line is 1, but 
   you can change to any line as start line.

    .. image:: ../_static/SIMG-automation-package/run-button.png

6. After test completed, Press "Save" button to save the test result to
   csv file.



Utility
^^^^^^^
The utility was in utility folder, each program have a folder.

.. image:: ../_static/SIMG-automation-package/utility-AFG.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-AWG.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-CG635.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-DTG.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-E364x.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-I2CStduio3.png
   :height: 200px
   :width: 200 px

.. image:: ../_static/SIMG-automation-package/utility-JBERT.png
   :height: 200px
   :width: 200 px



.. _Programming-Guide:

Programming Guide
-----------------

How to build a measurement UI(Sub UI) can be call by main(Main UI)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. The Sub UI must be put into **meas** folder, in which each UI has a sub folder. Main UI  will load the program  in the sub folder if the name of the sub folder match the name pointed out by **meas** colomn of the first line of the test file.

.. image:: ../_static/SIMG-automation-package/meas_call.png
   :height: 200px
   :width: 600 px

2. The Sub UI's main Frame must use name **MeasFrame**, as shown in below python code

   **class MeasFrame(MeasFrameBase):**

3. The Sub UI must has 3 special functions below to communication with Main UI

**SetValue** – transfer parameters from main to sub UI
  
.. image:: ../_static/SIMG-automation-package/SetValue.png
   :height: 200px
   :width: 600 px
   
**GetTitle** - Send the sub UI measure results title to Main
  
.. image:: ../_static/SIMG-automation-package/GetTitle.png
   :height: 200px
   :width: 600 px
  
**GetValue** – Send sub UI measure results to Main
  
.. image:: ../_static/SIMG-automation-package/GetValue.png
   :height: 200px
   :width: 600 px

How to build a measurement UI(Sub UI) which can be shown and open in Main UI manual **Utility** option
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


1. The Sub UI must has a special function with name **UpdateStatus** to tell the Main UI its name and status
   The typical UpdateStatus function is shown in below python code
   
    **def UpdateStatus(self):**
        **return ("Done","CG635")** 
   
2. The Sub UI must be put into **Utility** folder, each UI have a folder.
   Then you can find the **CG635** and other Sub UIs appear in the Utility manual of the Main UI and you can open then here.

.. image:: ../_static/SIMG-automation-package/utility.png
   :height: 200px
   :width: 200 px


..[#ASIHSDD] Advanced Signal integrity for high speed digital design.  Stephen H.HALL & Howard L.Heck





